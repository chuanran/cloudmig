package com.ibm.cloud.migration.cmd.tool.handler.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URL;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;

import org.apache.commons.cli.CommandLine;
import org.cloudfoundry.client.lib.CloudCredentials;
import org.cloudfoundry.client.lib.CloudFoundryClient;
import org.cloudfoundry.client.lib.domain.CloudApplication;
import org.cloudfoundry.client.lib.domain.CloudService;
import org.cloudfoundry.client.lib.domain.CloudServiceOffering;
import org.cloudfoundry.client.lib.domain.CloudServicePlan;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.security.oauth2.common.OAuth2AccessToken;

import com.heroku.api.Addon;
import com.heroku.api.HerokuAPI;
import com.ibm.cloud.migration.cmd.tool.handler.AbstractCustomHandler;
import com.ibm.cloud.migration.appmodel.model.Relationship;
import com.ibm.cloud.migration.appmodel.model.ServiceNode;
import com.ibm.cloud.migration.appmodel.model.Relationship.RelationshipType;
import com.ibm.cloud.migration.appmodel.model.ServiceNode.ServiceType;

public class ListServiceOfferingsHandler extends AbstractCustomHandler{	
	private static final String PROPERTY_FILE = "env.properties";
	public static final String COMMAND_HELP = new StringBuilder().append(" -cf-service-offerings/--cf-service-offerings ").append(resource.getString("cf-service-offerings")).toString();
	
	public ListServiceOfferingsHandler(){		
	}
	
	public String getHandlerName()
	  {
	    return "CF Service Offerings";
	  }
	
	public String getOptionHelp(){
		
	    return COMMAND_HELP;
	}
	
	public String getDescription(){
		return null;
	}
	
	private List<CloudServiceOffering> selectServices(List<CloudServiceOffering> services){
		List<CloudServiceOffering> selectedServices = new ArrayList<CloudServiceOffering>(services.size());
		System.out.println("Selecting services to be created (use services number,separated by comma):");
		for(int i=1;i<=services.size();i++){
			System.out.println(i+"."+services.get(i-1).getName());
		}
		Scanner reader=new Scanner(System.in);
		String line = reader.nextLine();
		//FIXME: more robust input handling
		String[] sels = line.split(",");		
		for(int i=0;i<sels.length;i++){
			selectedServices.add(services.get(Integer.parseInt(sels[i])-1));
		}
		
		if(selectedServices!=null && selectedServices.size()>0){
			for(CloudServiceOffering service : selectedServices){
				
			}
		}
		
		
//		for(CloudServiceOffering service : selectedServices){
//			System.out.println("service label is: " + service.getLabel());
//			System.out.println("service name is: " + service.getName());
//			System.out.println("service version is: " + service.getVersion());
//			System.out.println("service plan is: " + service.getCloudServicePlans());
//			System.out.println("service meta is: " + service.getMeta());
//			System.out.println("service description is: " +service.getDescription());
//			System.out.println("service provider is: " +service.getProvider());
//			for(CloudServicePlan plan : service.getCloudServicePlans()){
//				//100
//				System.out.println("service plan name is: " + plan.getName());
//				//org.cloudfoundry.client.lib.domain.CloudEntity$Meta@3bf53bf5
//				System.out.println("service plan name is: " + plan.getMeta());
//				//CloudServiceOffering: (fd67d45a-329f-428d-946e-5cf5a22516e7) mongodb
//				System.out.println(plan.getServiceOffering());
//			}
//			
//		}
		return selectedServices;
	}
	
	public CloudServicePlan selectServicePlan(CloudServiceOffering selectedService){
		CloudServicePlan service_plan = null;
		System.out.println("Listing service plans of " + selectedService.getName() + ":");
		for(int i=1;i<=selectedService.getCloudServicePlans().size(); i++){
			System.out.println(i+"."+selectedService.getCloudServicePlans().get(i-1));
		}
		Scanner reader_plan=new Scanner(System.in);
		String line_plan_num = reader_plan.nextLine();
		service_plan = selectedService.getCloudServicePlans().get((Integer.parseInt(line_plan_num)-1));
		return service_plan;
		
	}
	
	public void handle(CommandLine cl) throws Exception{
		String action = cl.getOptionValue("action");
		if(action.equalsIgnoreCase("cf-service-offerings")){
			
			//read the target_url  from env.properties(which was generated by the first login to the cloud) under project
			Properties prop = new Properties();
			InputStream fis = new FileInputStream(PROPERTY_FILE);
			prop.load(fis);
			String targetUrl = prop.getProperty("cf_url");

			ObjectMapper mapper = new ObjectMapper();
			OAuth2AccessToken token = mapper.readValue(new File("cfuser.json"), OAuth2AccessToken.class);
			CloudCredentials cred = new CloudCredentials(token);
			CloudFoundryClient cfClient = new CloudFoundryClient(cred, new URL(targetUrl));	 
			
			System.out.println("listing services ...");
			List<CloudServiceOffering> services = cfClient.getServiceOfferings();
			
//			for(CloudServiceOffering service :services){
//				System.out.println("service plan is: " + service.getLabel() + service.getVersion() + " "+service.getCloudServicePlans());
//			}
			
			List<CloudServiceOffering> selServices = selectServices(services);
			
			if(selServices.size()==0){
				System.out.println("nothing to export");
				return;
			} else{
				for(CloudServiceOffering service : selServices){
					selectServicePlan(service);
				}
			}
		}else if(action.equalsIgnoreCase("heroku-app-addons")){
			if(!check(cl))
				return;
			String app_name = cl.getOptionValue("a");
			
			//get the heroku_api_key from env.properties
			Properties prop = new Properties();
			InputStream fis = new FileInputStream(PROPERTY_FILE);
			prop.load(fis);
			String heroku_api_key = prop.getProperty("heroku_api_key");
			HerokuAPI heroku = new HerokuAPI(heroku_api_key);
			List<Addon> addons = heroku.listAppAddons(app_name);
			for(Addon addon : addons){
				String name = addon.getName();
				System.out.println("addon names: " + name);
				//FIXME: to support more addons
//				if(!name.contains("mongo")){
//					System.out.println("unsupported addon " + name +" for app " + app.getName());
//					continue;
//				}
//				String serviceName = app.getName()+"Mongo";
//				ServiceNode serviceNode = new ServiceNode(model);
//				serviceNode.setName(app.getName()+"Mongo");
//				serviceNode.setServiceType(ServiceType.mongo);
//				serviceNode.setProperty("dbName", app.getName()+"-db");
//				model.addNode(serviceNode);
//				
//				Relationship relation = new Relationship();
//				relation.setSourceNode(app.getName());
//				relation.setTargetNode(serviceName);
//				relation.setType(RelationshipType.connectTo);
//				model.addRelationship(relation);
			}
			
		}
	}
	
	private boolean check(CommandLine cl) {
		 boolean checkFlag = true;
		 String errMsg = "";
		 
		 if (!cl.hasOption("a")) {
		      checkFlag = false;
		      System.out.println();
		      System.out.println("Must enter '-a/--app'.");
		      System.out.println("  -a, --app APPLICATION			Applicaion");
		      System.out.println();
		      System.out.println("Other options can see 'mig help -cm login' for help.");
		      System.out.println();
		      return false;
		      //errMsg = new StringBuilder().append(errMsg).append(resource.getString("target")).toString();
		 }
		 
		 //the target url parameter can be empty, there should be a default one
//		 if (!cl.hasOption("l")) {
//		      checkFlag = false;
//		      errMsg = new StringBuilder().append(errMsg).append(resource.getString("url")).toString();
//		 }

		 if (!checkFlag) {
			 if (errMsg != "") {
			        errMsg = MessageFormat.format(resource.getString("missingOption"), new Object[] { errMsg });
			 }
		 }
		 return true;
	 }
	
}

