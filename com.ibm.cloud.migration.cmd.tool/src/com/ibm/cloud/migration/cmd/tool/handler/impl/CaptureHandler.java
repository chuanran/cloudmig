package com.ibm.cloud.migration.cmd.tool.handler.impl;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Scanner;

import org.apache.commons.cli.CommandLine;
import org.cloudfoundry.client.lib.CloudCredentials;
import org.cloudfoundry.client.lib.CloudFoundryClient;
import org.cloudfoundry.client.lib.domain.CloudApplication;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.security.oauth2.common.OAuth2AccessToken;

import com.heroku.api.App;
import com.heroku.api.HerokuAPI;
import com.ibm.cloud.migration.cmd.tool.handler.AbstractCustomHandler;
import com.ibm.cloud.migration.cmd.tool.utility.AppModelConstants;
import com.ibm.cloud.migration.cmd.tool.utility.CFExporter;
import com.ibm.cloud.migration.cmd.tool.utility.RetrieveCloudCred;
import com.ibm.cloud.migration.cmd.tool.utility.CFExporter.Dependency;
import com.ibm.cloud.migration.cmd.tool.utility.HerokuExporter;
import com.ibm.cloud.migration.cmd.tool.utility.HerokuExporter.HerokuDependency;
import com.ibm.cloud.migration.appmodel.AppModelSerializer;
import com.ibm.cloud.migration.appmodel.model.AppModel;

public class CaptureHandler extends AbstractCustomHandler{
	private static final String PROPERTY_FILE = "env.properties";
	public static final String COMMAND_HELP = new StringBuilder().append(" -t/--target ").append(resource.getString("target")+"\n").append(" -a/--app ").append(resource.getString("app")+"\n").append(" -dep/--dependency ").append(resource.getString("dependency")+"\n").append(" -am/--appmodel ").append(resource.getString("appmodel")+"\n").toString();
	public static final String DESCRIPTION = "Capture the application model from target cloud";			
	protected CloudFoundryClient cfClient;

	public CaptureHandler(){		
	}
	
	public String getHandlerName()
	  {
	    return "capture";
	  }
	
	public String getOptionHelp(){
		
	    return COMMAND_HELP;
	}
	
	public String getDescription(){
		return DESCRIPTION;
	}
	
	public void handle(CommandLine cl) throws Exception{
		if(!check(cl))
			return;
		String target = cl.getOptionValue("t");
		if(target==null){
			System.out.println("list common cloud platforms ......");
			String[] platforms = AppModelConstants.CLOUD_PLATFORM;
			for(int i=1; i<=platforms.length; i++){
				System.out.println(i+"."+platforms[i-1]);
			}
			System.out.println("select one cloud platform to capture application model from:");
			Scanner reader_platform=new Scanner(System.in);
			String index_platform = reader_platform.nextLine();
			target = platforms[Integer.parseInt(index_platform)-1];
		}
		String app_name = (cl.getOptionValue("a"));
		
		if(app_name == null){
			System.out.println("the application(s) names you want to capture(e.g. app1,app2): ");
			Scanner reader_app=new Scanner(System.in);
			app_name = reader_app.nextLine();
		}
		//obtain the dependency list if there are more than 1 application and there are dependencies too
		String dependency_str = cl.getOptionValue("dep");
		String[] dependencies = null;
		//it tips there are more than 1 application if "," exists
		if(app_name.contains(",")){
			if(dependency_str!=null){
				dependencies = dependency_str.split(",");
			} else{
				System.out.println("Would you like to assign the application dependency explicitly?(Y/N)");
				Scanner reader_answer=new Scanner(System.in);
				String answer = reader_answer.nextLine();
				if(answer.equalsIgnoreCase("Y")){
					System.out.println("the application dependency(e.g. app1->app2, app2->app3): ");
					Scanner reader_dep=new Scanner(System.in);
					dependency_str = reader_dep.nextLine();
					dependencies = dependency_str.split(",");
				} else{
					System.out.println("will try to generate the application depends-on relationship in application model by auto-detecting the implicit dependency");
				}
			}
		}
		
		if(target.equalsIgnoreCase("cf")){
			//read the target_url  from env.properties(which was generated by the first login to the cloud) under project
			Properties prop = new Properties();
			InputStream fis = new FileInputStream(PROPERTY_FILE);
			prop.load(fis);
			String targetUrl = prop.getProperty("cf_url");
			
			//de-serialize the token from json file "cfuser.json"
			ObjectMapper mapper = new ObjectMapper();
			OAuth2AccessToken token = mapper.readValue(new File("cfuser.json"), OAuth2AccessToken.class);
			CloudCredentials cred = new CloudCredentials(token);
			
			//obtain the org and space
			//obtain the organization and space parameter for the application
//			String org_name = cl.getOptionValue("o");
//			String space_name = cl.getOptionValue("s");
//			if(org_name==null ||org_name.trim().length()==0){
//				//obtain the default org name from resource.properties file
//				System.out.println("Suggest enter your org, or maybe occur error.");
//				System.out.println("If enter your org Y/N");
//				Scanner reader=new Scanner(System.in);
//				String answer = reader.nextLine();
//				if(answer.equalsIgnoreCase("Y")){
//					System.out.println("Please enter your org: ");
//					String answer1 = reader.nextLine();
//					org_name=answer1;
//				}else if(answer.equalsIgnoreCase("N")){
//					org_name=resource.getString("default_org");
//				}				
//			}
//			if(space_name==null ||space_name.trim().length()==0){
//				System.out.println("Suggest enter your space, or maybe occur error.");
//				System.out.println("If enter your space Y/N");
//				Scanner reader=new Scanner(System.in);
//				String answer = reader.nextLine();
//				if(answer.equalsIgnoreCase("Y")){
//					System.out.println("Please enter your space: ");
//					String answer1 = reader.nextLine();
//					space_name=answer1;
//				}else if(answer.equalsIgnoreCase("N")){
//					space_name=resource.getString("default_space");
//				}					
//			}
			
			CloudFoundryClient cfClient = new CloudFoundryClient(cred, new URL(targetUrl));
			//CloudFoundryClient cfClient = new CloudFoundryClient(cred, new URL(targetUrl), org_name, space_name);	
			List<CloudApplication> apps = cfClient.getApplications();	
			
			//obtain the application list which needs to be captured
			//String app_name = (cl.getOptionValue("a"));
			String[] sels = app_name.split(",");
			
			List<CloudApplication> selectedApps = new ArrayList<CloudApplication>(sels.length);	
			if(sels.length==0){
				System.out.println("nothing to export");
				return;
			} else{
				for(int i=0;i<sels.length;i++){
					for(CloudApplication app :apps){
						if(sels[i].trim().equals(app.getName())){
							selectedApps.add(app);
						}
					}
				}
			}
			
			
			//generate the "deps" object which would be used to generate the application model
			Map<String, List<Dependency>> deps = new HashMap<String, List<Dependency>>();
			if(dependencies!=null){
				for(String dependency : dependencies){
					CloudApplication sourceApp =null;
					CloudApplication targetApp =null;
					String[] dep_str = dependency.split("->");
					Dependency dep = new Dependency();
					for(CloudApplication selectedApp : selectedApps){
						if(dep_str[0].trim().equals(selectedApp.getName())){
							sourceApp = selectedApp;
						}
						if(dep_str[1].trim().equals(selectedApp.getName())){
							targetApp = selectedApp;
						}
					}
					dep.setSource(sourceApp);
					dep.setTarget(targetApp);
					List<Dependency> list = deps.get(sourceApp.getName());
					if(list == null){
						list = new ArrayList<Dependency>();
						deps.put(sourceApp.getName(), list);
					}
					list.add(dep);
					//System.out.println("Generate the depends-on relationship in application model according to the manually-defined dependency");
				}
			}
			
			  
			//Map<String, List<Dependency>> deps = new HashMap<String, List<Dependency>>();
			
					
			System.out.println("starting to generate application model ...");
			CFExporter cfexport=new CFExporter();
			AppModel appModel = cfexport.buildAppModel(cfClient, selectedApps, deps);
					
			AppModelSerializer serializer = new AppModelSerializer();
			String path = (cl.getOptionValue("am"));
			//System.out.println("path is: " + path);
			if(path==null){
				path = "application_model_cf.xml";
			}
			File am_path = new File(path);
			if(!am_path.exists()){
				throw new FileNotFoundException("The application model path you designed doesn't exist!");
			}
			serializer.serialize(appModel, new FileOutputStream(path));
			System.out.println("application model is saved to " + am_path.getAbsolutePath() + "\n");
			System.out.println("Would you like to take a look at the application model?(Y/N)");
			Scanner model_answer_reader=new Scanner(System.in);
			String model_answer = model_answer_reader.nextLine();
			if(model_answer.equalsIgnoreCase("Y")){
				System.out.println("The contents of captured application model:\n");
				//Display the content of the application model
				try{
					BufferedReader in = new BufferedReader(new FileReader(path));
					String app_model_str;
			        while ((app_model_str = in.readLine()) != null) 
			        {
			              System.out.println(app_model_str);
			        }
			        in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		} else if(target.equalsIgnoreCase("heroku")){
			
			//get the heroku_api_key from env.properties
//			Properties prop = new Properties();
//			InputStream fis = new FileInputStream(PROPERTY_FILE);
//			prop.load(fis);
			String heroku_api_key = RetrieveCloudCred.getHerokuAPIKey();
			//String heroku_api_key = prop.getProperty("heroku_api_key");
			HerokuAPI heroku = new HerokuAPI(heroku_api_key);
			List<App> apps = heroku.listApps();	
		
			//select the application which would be captured from the cmd line option "-app"		
			//String app_name = (cl.getOptionValue("a"));
			String[] sels = app_name.split(",");
			List<App> selApps = new ArrayList<App>(sels.length);
			if(sels.length==0){
				System.out.println("nothing to export");
				return;
			} else{
				for(int i=0;i<sels.length;i++){
					for(App app :apps){
						if(sels[i].trim().equals(app.getName())){
							selApps.add(app);
						}
					}
				}
			}
			//generate the "deps" object which would be used to generate the application model
			Map<String, List<HerokuDependency>> deps = new HashMap<String, List<HerokuDependency>>();
			if(dependencies!=null){
				for(String dependency : dependencies){
					App sourceApp =null;
					App targetApp =null;
					String[] dep_str = dependency.split("->");
					HerokuDependency dep = new HerokuDependency();
					for(App selectedApp : selApps){
						if(dep_str[0].trim().equals(selectedApp.getName())){
							sourceApp = selectedApp;
						}
						if(dep_str[1].trim().equals(selectedApp.getName())){
							targetApp = selectedApp;
						}
					}
					dep.setSource(sourceApp);
					dep.setTarget(targetApp);
					List<HerokuDependency> list = deps.get(sourceApp.getName());
					if(list == null){
						list = new ArrayList<HerokuDependency>();
						deps.put(sourceApp.getName(), list);
					}
					list.add(dep);
					//System.out.println("Generate the depends-on relationship in application model according to the manually-defined dependency");
				}
			}
			System.out.println("starting to generate application model ...");
			HerokuExporter herokuexport=new HerokuExporter();
			AppModel appModel = herokuexport.buildAppModel(heroku, selApps, deps);
			
			AppModelSerializer serializer = new AppModelSerializer();
			String path = (cl.getOptionValue("am"));
			if(path==null){
				path = "application_model_heroku.xml";
			}
			File am_path = new File(path);
			if(!am_path.exists()){
				throw new FileNotFoundException("The application model path you designed doesn't exist!");
			}
			serializer.serialize(appModel, new FileOutputStream(path));
			System.out.println("application model is saved to " + am_path.getAbsolutePath());
			System.out.println("Would you like to take a look at the application model?(Y/N)");
			Scanner model_answer_reader=new Scanner(System.in);
			String model_answer = model_answer_reader.nextLine();
			if(model_answer.equalsIgnoreCase("Y")){
				System.out.println("The contents of captured application model:\n");
				//Display the content of the application model
				try{
					BufferedReader in = new BufferedReader(new FileReader(path));
					String app_model_str;
			        while ((app_model_str = in.readLine()) != null) 
			        {
			              System.out.println(app_model_str);
			        }
			        in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		

	}
	
	 private boolean check(CommandLine cl) {
		 boolean checkFlag = true;
		 String errMsg = "";
		 
//		 if (!cl.hasOption("t")) {
//		      checkFlag = false;
//		      System.out.println();
//		      System.out.println("Must enter '-t/--target'.");
//		      System.out.println("  -t, --target cloud platform name");
//		      System.out.println();
//			  System.out.println("Other options can see 'mig deploy -h' for help.");
//			  System.out.println();
//			  return false;
//		      //errMsg = new StringBuilder().append(errMsg).append(resource.getString("target")).toString();
//		 }
		 
//		 if (!cl.hasOption("a")) {
//		      checkFlag = false;
//		      System.out.println();
//		      System.out.println("Must enter '-a/--app'. See 'mig capture -h' for help.");
//		      System.out.println("  -a, --app APPLICATION			Applicaion");
//		      System.out.println();
//			  System.out.println("Other options can see 'mig capture -h' for help.");
//			  System.out.println();
//		      return false;
//		      //errMsg = new StringBuilder().append(errMsg).append(resource.getString("target")).toString();
//		 }
		 
//		 if (!cl.hasOption("am")) {
//			 System.out.println();
//			 System.out.println("Must enter '-am/--appmodel'. See 'mig help -cm capture' for help.");
//			 System.out.println("  -am, --appmodel APPMODEL_XML		Appmodel_XML path and name");
//			 System.out.println();
//			 System.out.println("Other options can see 'mig help -cm capture' for help.");
//			 System.out.println();
//			 return false;
//		      //errMsg = new StringBuilder().append(errMsg).append(resource.getString("username")).toString();
//		 }
		 
		 if (!checkFlag) {
			 if (errMsg != "") {
			        errMsg = MessageFormat.format(resource.getString("missingOption"), new Object[] { errMsg });
			        return false;
			 }
		 }		 
		 return true;
	 }
}

