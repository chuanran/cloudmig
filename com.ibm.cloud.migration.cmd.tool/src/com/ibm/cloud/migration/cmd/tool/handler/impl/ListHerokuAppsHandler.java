package com.ibm.cloud.migration.cmd.tool.handler.impl;

import java.net.URL;
import java.util.List;
import java.util.Scanner;

import org.apache.commons.cli.CommandLine;
import org.cloudfoundry.client.lib.CloudCredentials;
import org.cloudfoundry.client.lib.CloudFoundryClient;
import org.cloudfoundry.client.lib.domain.CloudApplication;

import com.heroku.api.App;
import com.heroku.api.HerokuAPI;
import com.ibm.cloud.migration.cmd.tool.handler.AbstractCustomHandler;
import com.ibm.cloud.migration.cmd.tool.utility.RetrieveCloudCred;

public class ListHerokuAppsHandler extends AbstractCustomHandler{	
	public static final String COMMAND_HELP = " ";
	//public static final String COMMAND_HELP = new StringBuilder().append(" -o/--org ").append(resource.getString("org")).append(" -s/--space ").append("space").toString();
	public static final String DESCRIPTION = "List the application running on the Heroku";
	public ListHerokuAppsHandler(){		
	}
	
	public String getHandlerName()
	  {
	    return "Heroku Apps";
	  }
	
    public String getOptionHelp(){
	    return COMMAND_HELP;
	}
    public String getDescription(){
		return DESCRIPTION;
	}
	
	private void listHerokuApps(List<App> apps){
		for(int i=1;i<=apps.size();i++){
			System.out.println(i+"."+apps.get(i-1).getName());
		}
	}
	
	public void handle(CommandLine cl) throws Exception{
		String action = cl.getOptionValue("action");
		if(action.equalsIgnoreCase("heroku-apps")){
			//read the heroku_api_key from env.properties(which was generated by the first login to the cloud) under project
			String heroku_api_key = RetrieveCloudCred.getHerokuAPIKey();
			
			System.out.println("listing applications ...");
			HerokuAPI heroku = new HerokuAPI(heroku_api_key);
			List<App> apps = heroku.listApps();	
			if(apps.size()==0){
				System.out.println("nothing to export");
			}else{
				listHerokuApps(apps);
			}
		}
	}
	
}


