package com.ibm.cloud.migration.cmd.tool.handler.impl;


import java.io.File;
import java.io.FileNotFoundException;
import java.net.URL;
import java.util.List;
import java.util.Scanner;

import org.apache.commons.cli.CommandLine;
import org.cloudfoundry.client.lib.CloudCredentials;
import org.cloudfoundry.client.lib.CloudFoundryClient;
import org.cloudfoundry.client.lib.domain.CloudEntity.Meta;
import org.cloudfoundry.client.lib.domain.CloudService;
import org.cloudfoundry.client.lib.domain.CloudServiceOffering;
import org.cloudfoundry.client.lib.domain.CloudSpace;

import com.ibm.cloud.migration.cmd.tool.handler.AbstractCustomHandler;
import com.ibm.cloud.migration.cmd.tool.utility.AppModelConstants;
import com.ibm.cloud.migration.cmd.tool.utility.MapToCFService;
import com.ibm.cloud.migration.cmd.tool.utility.PushAppToCF;
import com.ibm.cloud.migration.cmd.tool.utility.RetrieveCloudCred;
import com.ibm.cloud.migration.appmodel.AppModelException;
import com.ibm.cloud.migration.appmodel.AppModelParser;
import com.ibm.cloud.migration.appmodel.model.AppModel;
import com.ibm.cloud.migration.appmodel.model.ServiceNode;
import com.ibm.cloud.migration.appmodel.model.WebAppNode;

public class DeployHandler extends AbstractCustomHandler{
	private static AppModel model;
	private static List<ServiceNode> services;
	private static List<WebAppNode> webapps;
	private static String buildpack_type;
	public static final String COMMAND_HELP = new StringBuilder().append(" -t/--target ").append(resource.getString("target")+"\n").append(" -ad/--appdir ").append(resource.getString("appdir")+"\n").append(" -am/-appmodel ").append(resource.getString("appmodel")+"\n").append(" -o/-org ").append(resource.getString("org") + "\n").append(" -s/-space ").append(resource.getString("space")).toString();
	public static final String DESCRIPTION = "Deploy the captured application model to the target cloud";
	public String getDescription(){
		return DESCRIPTION;
	}
	public void handle(CommandLine cl) throws Exception{
		if(!check(cl))
			return;
		
		String target_cloud = (cl.getOptionValue("t"));
		if(target_cloud==null){
			System.out.println("list common cloud platforms ......");
			String[] platforms = AppModelConstants.CLOUD_PLATFORM;
			for(int i=1; i<=platforms.length; i++){
				System.out.println(i+"."+platforms[i-1]);
			}
			System.out.println("select one cloud platform to deploy captured application model to:");
			Scanner reader_platform=new Scanner(System.in);
			String index_platform = reader_platform.nextLine();
			target_cloud = platforms[Integer.parseInt(index_platform)-1];
		}
		
		String app_dir = (cl.getOptionValue("ad"));
		//assign the application package directory
		if(app_dir==null){
			System.out.println("Would you like to download the application package from the source cloud platform?(Y/N)");
			Scanner reader_answer=new Scanner(System.in);
			String answer = reader_answer.nextLine();
			if(answer.equalsIgnoreCase("N")){
				System.out.println("assign the directory of the local system where the application package is:");
				Scanner reader_dir=new Scanner(System.in);
				app_dir = reader_dir.nextLine();
				File ad = new File(app_dir);
				if(!ad.exists()){
					throw new FileNotFoundException("The directory you designed doesn't exist!");
				}
			}
		}
		
		if(target_cloud.equals("cf")){
			//Obtain the target url from env.properties which was generated by the first login to CF
			String target_url = RetrieveCloudCred.getTargetCFURL();
			String org_name = (cl.getOptionValue("o"));
			String space_name = (cl.getOptionValue("s"));
			
			//Retrieve the CF credential from the serialized token
			CloudCredentials cred = RetrieveCloudCred.getCFCred();
			CloudFoundryClient cfClient = new CloudFoundryClient(cred, new URL(target_url));
			
			//obtain the organization and space parameter for the application
//			String org_name = cl.getOptionValue("o");
//			String space_name = cl.getOptionValue("s");
//			if(org_name==null ||org_name.trim().length()==0){
//				//obtain the default org name from resource.properties file
//				System.out.println("Suggest enter your org, or maybe occur error.");
//				System.out.println("If enter your org Y/N");
//				Scanner reader=new Scanner(System.in);
//				String answer = reader.nextLine();
//				if(answer.equalsIgnoreCase("Y")){
//					System.out.println("Please enter your org: ");
//					String answer1 = reader.nextLine();
//					org_name=answer1;
//				}else if(answer.equalsIgnoreCase("N")){
//					org_name=resource.getString("default_org");
//				}				
//			}
//			if(space_name==null ||space_name.trim().length()==0){
//				System.out.println("Suggest enter your space, or maybe occur error.");
//				System.out.println("If enter your space Y/N");
//				Scanner reader=new Scanner(System.in);
//				String answer = reader.nextLine();
//				if(answer.equalsIgnoreCase("Y")){
//					System.out.println("Please enter your space: ");
//					String answer1 = reader.nextLine();
//					space_name=answer1;
//				}else if(answer.equalsIgnoreCase("N")){
//					space_name=resource.getString("default_space");
//				}					
//			}
			
			
			//assign the application model xml file's location
			String app_model = (cl.getOptionValue("am"));
			if(app_model==null){
				System.out.println("assign the file path of the captured application model(e.g. /opt/application_model_cf.xml)<default: ./application_model_heroku.xml>:" );
				Scanner reader_am=new Scanner(System.in);
				app_model = reader_am.nextLine();
				if(app_model.isEmpty()){
					app_model = "application_model_heroku.xml";
				}
			}
			
			File app_model_file = new File(app_model);
			if(!app_model_file.exists()){
				throw new FileNotFoundException("The application model file cannot be found!");
			}
			
			//construct appmodel object from the application model xml file
			AppModelParser parser = new AppModelParser();
			try {
				model = parser.parse(app_model);
				webapps = model.getWebApps();
				
			} catch (AppModelException e) {
						// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			//Get applications and the buildpack_url in the application model
			System.out.println("Reuse the orinal services? (Y/N):");
			Scanner reuse_service_scanner =new Scanner(System.in);
			String reuse_service_answer = reuse_service_scanner.nextLine();
			if(reuse_service_answer.equalsIgnoreCase("y")){
				boolean mig_service = false;
				PushAppToCF.pushAppToCF(mig_service, model, cfClient, app_dir);
			} else{
				if(org_name == null){
					//System.out.println(target_url);
					
					//OAuth2AccessToken token = cfClient.login();
					System.out.println("Listing organizations: ");
					for(int i =1; i<=cfClient.getOrganizations().size(); i++){
						System.out.println(i+ ". "+ cfClient.getOrganizations().get(i-1).getName());
					}
					System.out.println("Choose an organization: ");
					Scanner reader_org=new Scanner(System.in);
					String org_index = reader_org.nextLine();
					org_name = cfClient.getOrganizations().get(Integer.parseInt(org_index)-1).getName();
					
					System.out.println("Listing spaces: ");
					for(int i =1; i<=cfClient.getSpaces().size(); i++){
						System.out.println(i+ ". "+ cfClient.getSpaces().get(i-1).getName());
					}
					System.out.println("Choose an space to create service in: ");
					Scanner reader_space=new Scanner(System.in);
					String space_index = reader_space.nextLine();
					space_name = cfClient.getSpaces().get(Integer.parseInt(space_index)-1).getName();
				}
				boolean mig_service = true;
				//Get the services in the application model 
				services = model.getServices();
			    //Need to refine here, need to check whether the space need to be obtained
				 cfClient = new CloudFoundryClient(cred, new URL(target_url), org_name, space_name);
				CloudSpace space = null;
				for(CloudSpace space_iter: cfClient.getSpaces()){
					if (space_iter.getName().equalsIgnoreCase(space_name)){
						space = space_iter;
						break;
					}
				}
				
				//create new cloud service
				//System.out.println("listing service offerings in cloud Foundry matching with the captured application model...");
				List<CloudServiceOffering> service_offerings = cfClient.getServiceOfferings();
				for(ServiceNode service: services){
					CloudServiceOffering selServiceOffering = MapToCFService.selectServiceOffering(service, service_offerings);
					String service_name = service.getName();
					String service_label = selServiceOffering.getLabel();
					String service_plan = MapToCFService.selectServicePlan(selServiceOffering).getName();
					String service_version = selServiceOffering.getVersion();
					Meta meta = space.getMeta();
					
					//Create cloud service according to the chosen service info
					CloudService cloudservice = new CloudService();
					cloudservice.setName(service_name);
					cloudservice.setLabel(service_label);
					cloudservice.setPlan(service_plan);
					cloudservice.setVersion(service_version);
					cloudservice.setMeta(meta);
					System.out.println("Creating service instance: " + service.getName());
					cfClient.createService(cloudservice);
					
					
//					List<WebAppNode> webapps = model.getAppsConnectedWithService(service_name);
//					if(webapps !=null && webapps.size()>0){
//						for(WebAppNode webapp : webapps){
//							String app_name = webapp.getName();
//							//For each application, generate auto-config-{app_name} file for each application to realize env variable mapping
//							ModifyApp4EnvMapping.generateAutoConfigFile(webapp, service_label, service_version);
//							
//							//Move the auto-config-{app_name} file to the parent directory of package.json file
//							new FileMove().moveFile("auto-config-"+app_name+".js", ModifyApp4EnvMapping.findFile(app_dir + File.separator + app_name, "package.json").getParent());
//							
//							//Get app entrypoint file which is defined in package.json file
//							File app_entry_point_file = ModifyApp4EnvMapping.getAppEntryPointFile(webapp);
//							String lineToBeInserted = "require ('./auto-config-"+app_name+"');";
//							FileInsertRow.insertStringInFile(app_entry_point_file, 1, lineToBeInserted);
//						}
//					}
				}
				PushAppToCF.pushAppToCF(mig_service, model, cfClient, app_dir);
			}
		}
	}

	
	public String getHandlerName() {
		return "deploy captured application  model";
	}

	
	public String getOptionHelp() {
		// TODO Auto-generated method stub
		return COMMAND_HELP;
	}
	
	private boolean check(CommandLine cl) {
		 boolean checkFlag = true;
		 String errMsg = "";
//		 if(cl.getOptions().length == 0 || cl.getOptions() == null){
//			 
//		 }
		 
//		 if (!cl.hasOption("t")) {
//		      checkFlag = false;
//		      System.out.println();
//		      System.out.println("Must enter '-t/--target'.");
//		      System.out.println("  -t, --target cloud platform name");
//		      System.out.println();
//			  System.out.println("Other options can see 'mig deploy -h' for help.");
//			  System.out.println();
//			  return false;
//		      //errMsg = new StringBuilder().append(errMsg).append(resource.getString("target")).toString();
//		 }
//		 if (!cl.hasOption("ad")) {
//		      checkFlag = false;
//		      System.out.println();
//		      System.out.println("Must enter '-ad/--appdir'. See 'mig deploy -h' for help.");
//		      System.out.println("  -ad, --appdir APPLICATION_DIR		Applicaion_dir");
//		      System.out.println();
//			  System.out.println("Other options can see 'mig deploy -h' for help.");
//			  System.out.println();
//			  return false;
//		      //errMsg = new StringBuilder().append(errMsg).append(resource.getString("target")).toString();
//		 }
		 return true;
	 }
}