package com.ibm.cloud.migration.cmd.tool.handler.impl;

import java.net.URL;
import java.util.List;
import java.util.Scanner;

import org.apache.commons.cli.CommandLine;
import org.cloudfoundry.client.lib.CloudCredentials;
import org.cloudfoundry.client.lib.CloudFoundryClient;
import org.cloudfoundry.client.lib.domain.CloudApplication;

import com.heroku.api.App;
import com.heroku.api.HerokuAPI;
import com.ibm.cloud.migration.cmd.tool.handler.AbstractCustomHandler;
import com.ibm.cloud.migration.cmd.tool.utility.RetrieveCloudCred;

public class ListCFAppsHandler extends AbstractCustomHandler{
	public static final String COMMAND_HELP = " ";
	//public static final String COMMAND_HELP = new StringBuilder().append(" -o/--org ").append(resource.getString("org")).append(" -s/--space ").append("space").toString();
	public static final String DESCRIPTION = "List the application running on the Cloud Foundry";
	public ListCFAppsHandler(){		
	}
	
	public String getHandlerName()
	  {
	    return "CF Apps";
	  }
	
    public String getOptionHelp(){
	    return COMMAND_HELP;
	}
    public String getDescription(){
		return DESCRIPTION;
	}
	
	private void listCFApps(List<CloudApplication> apps){
		for(int i=1;i<=apps.size();i++){
			System.out.println(i+"."+apps.get(i-1).getName());
		}		
	}
	
	public void handle(CommandLine cl) throws Exception{
		String action = cl.getOptionValue("action");
		if(action.equalsIgnoreCase("cf-apps")){
			
			//read the target_url  from env.properties(which was generated by the first login to the cloud) under project
			String target_url = RetrieveCloudCred.getTargetCFURL();
			
			//obtain the organization and space parameter for the application
//			String org_name = cl.getOptionValue("o");
//			String space_name = cl.getOptionValue("s");
//			if(org_name==null ||org_name.trim().length()==0){
//				//obtain the default org name from resource.properties file
//				System.out.println("Suggest enter your org, or maybe occur error.");
//				System.out.println("If enter your org Y/N");
//				Scanner reader=new Scanner(System.in);
//				String answer = reader.nextLine();
//				if(answer.equalsIgnoreCase("Y")){
//					System.out.println("Please enter your org: ");
//					String answer1 = reader.nextLine();
//					org_name=answer1;
//				}else if(answer.equalsIgnoreCase("N")){
//					org_name=resource.getString("default_org");
//				}				
//			}
//			if(space_name==null ||space_name.trim().length()==0){
//				System.out.println("Suggest enter your space, or maybe occur error.");
//				System.out.println("If enter your space Y/N");
//				Scanner reader=new Scanner(System.in);
//				String answer = reader.nextLine();
//				if(answer.equalsIgnoreCase("Y")){
//					System.out.println("Please enter your space: ");
//					String answer1 = reader.nextLine();
//					space_name=answer1;
//				}else if(answer.equalsIgnoreCase("N")){
//					space_name=resource.getString("default_space");
//				}					
//			}
			
			//Retrieve the CF credential from the serialized token
			CloudCredentials cred = RetrieveCloudCred.getCFCred();
			
			CloudFoundryClient cfClient = new CloudFoundryClient(cred, new URL(target_url));	 
			
			System.out.println("listing applications ...");
			List<CloudApplication> apps = cfClient.getApplications();	
			if(apps.size()==0){
				System.out.println("nothing to export");
			}else{
				listCFApps(apps);
			}
			
		}
	}
	
}
